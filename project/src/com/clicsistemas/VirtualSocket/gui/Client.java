/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.clicsistemas.VirtualSocket.gui;

import com.clicsistemas.VirtualSocket.MyTrustManager;
import com.clicsistemas.VirtualSocket.SocketClient;
import com.clicsistemas.VirtualSocket.Util;
import com.clicsistemas.VirtualSocket.gui.controls.IConnControl;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.security.SecureRandom;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;

/**
 *
 * @author marcelo
 */
public class Client extends javax.swing.JPanel  implements IConnControl {
    private Socket socket;
    private SocketClient client;
    private PrintWriter clientOut;
    
    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        this.connDetailsControl1.setListener(this);
        this.sendControl1.setListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connDetailsControl1 = new com.clicsistemas.VirtualSocket.gui.controls.ConnDetailsControl();
        connStateControl1 = new com.clicsistemas.VirtualSocket.gui.controls.ConnStateControl();
        sendControl1 = new com.clicsistemas.VirtualSocket.gui.controls.SendControl();
        logo1 = new com.clicsistemas.VirtualSocket.gui.controls.Logo();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connStateControl1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                    .addComponent(sendControl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connDetailsControl1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(connDetailsControl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connStateControl1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendControl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.clicsistemas.VirtualSocket.gui.controls.ConnDetailsControl connDetailsControl1;
    private com.clicsistemas.VirtualSocket.gui.controls.ConnStateControl connStateControl1;
    private com.clicsistemas.VirtualSocket.gui.controls.Logo logo1;
    private com.clicsistemas.VirtualSocket.gui.controls.SendControl sendControl1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void OnClickConnect() {
        if(socket != null) {
            disconnect();
        } else {
            connect();
        }
    }

    @Override
    public void OnSendMessage(String msg) {
       Util.SendToSocket(socket, msg, this);
    }

    @Override
    public void disconnect() {
         try {            
            client.setDisconnected(true);
            socket.close();
        } catch (Exception e) {
            error("Error closing client : "+e);
        }
         
         this.connDetailsControl1.setConnectButtonText("Connect");
         
        socket = null;
        client = null;
    }

    private void connect() {
        this.connDetailsControl1.setEnabled(false);
        this.sendControl1.setEnabled(false);
        
        String ip = this.connDetailsControl1.getHostName();
        int port = this.connDetailsControl1.getPort();

        if(this.connDetailsControl1.isUdpEnabled()) {
            error("UDP not implemented yet, using Tcp instead");
        }
        
        if (ip != null && ip.isEmpty() == false) {
            if (port > 0) {
                // Check the Host
                if (Util.checkHost(ip)) {                    
                    try {
                        this.connStateControl1.append("Connecting to: " + ip + ":" + port);
                        
                        if(this.connDetailsControl1.isSecureEnabled()) {
                            this.connStateControl1.append("Mode: Secure");
                            
                            TrustManager[] tm = new TrustManager[] { new MyTrustManager(this) }; 
                            SSLContext context = SSLContext.getInstance("TLS");
                            context.init(new KeyManager[0], tm, new SecureRandom());

                            SSLSocketFactory factory = context.getSocketFactory();
                            socket = factory.createSocket(ip,port);
                        } else {      
                            this.connStateControl1.append("Mode: Normal");
                            this.socket = new Socket(ip, port);
                        }
                        
                        this.client = SocketClient.handle(this, socket);
                        this.connDetailsControl1.setConnectButtonText("Disconnect");
                    } catch (Exception e) {
                        this.connStateControl1.error(e.getLocalizedMessage(), "Connect");
                    }                    
                } else {
                    this.connStateControl1.error("Invalid Hostname or IP Address", "Connect");
                }
            } else {
                this.connStateControl1.error("Invalid Port Number", "Connect");
            }
        } else {
            this.connStateControl1.error("Invalid Hostname or IP Address", "Connect");
        }
        
        this.connDetailsControl1.setEnabled(true);
        this.sendControl1.setEnabled(true);
    }

    @Override
    public void error(String messege) {
        this.connStateControl1.error(messege, "Core");
    }

    @Override
    public void append(String string) {
        this.connStateControl1.append(string);
    }

    @Override
    public void error(String message, String where) {
        this.connStateControl1.error(message, where);
    }

    @Override
    public void setClientSocket(Socket socket) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
